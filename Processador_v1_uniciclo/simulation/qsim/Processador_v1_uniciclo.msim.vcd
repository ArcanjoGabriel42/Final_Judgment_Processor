$comment
	File created using the following command:
		vcd file Processador_v1_uniciclo.msim.vcd -direction
$end
$date
	Mon Dec 03 16:53:20 2018
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module unidadedecontrole_vhd_vec_tst $end
$var wire 1 ! aluSRC $end
$var wire 1 " branch $end
$var wire 1 # Clock $end
$var wire 1 $ entrada [3] $end
$var wire 1 % entrada [2] $end
$var wire 1 & entrada [1] $end
$var wire 1 ' entrada [0] $end
$var wire 1 ( escrevemem $end
$var wire 1 ) escrevereg $end
$var wire 1 * jump $end
$var wire 1 + lemem $end
$var wire 1 , memparareg $end
$var wire 1 - origalu [3] $end
$var wire 1 . origalu [2] $end
$var wire 1 / origalu [1] $end
$var wire 1 0 origalu [0] $end
$var wire 1 1 regdest $end

$scope module i1 $end
$var wire 1 2 gnd $end
$var wire 1 3 vcc $end
$var wire 1 4 unknown $end
$var wire 1 5 devoe $end
$var wire 1 6 devclrn $end
$var wire 1 7 devpor $end
$var wire 1 8 ww_devoe $end
$var wire 1 9 ww_devclrn $end
$var wire 1 : ww_devpor $end
$var wire 1 ; ww_Clock $end
$var wire 1 < ww_entrada [3] $end
$var wire 1 = ww_entrada [2] $end
$var wire 1 > ww_entrada [1] $end
$var wire 1 ? ww_entrada [0] $end
$var wire 1 @ ww_regdest $end
$var wire 1 A ww_origalu [3] $end
$var wire 1 B ww_origalu [2] $end
$var wire 1 C ww_origalu [1] $end
$var wire 1 D ww_origalu [0] $end
$var wire 1 E ww_memparareg $end
$var wire 1 F ww_escrevereg $end
$var wire 1 G ww_lemem $end
$var wire 1 H ww_escrevemem $end
$var wire 1 I ww_jump $end
$var wire 1 J ww_aluSRC $end
$var wire 1 K ww_branch $end
$var wire 1 L \regdest~output_o\ $end
$var wire 1 M \origalu[0]~output_o\ $end
$var wire 1 N \origalu[1]~output_o\ $end
$var wire 1 O \origalu[2]~output_o\ $end
$var wire 1 P \origalu[3]~output_o\ $end
$var wire 1 Q \memparareg~output_o\ $end
$var wire 1 R \escrevereg~output_o\ $end
$var wire 1 S \lemem~output_o\ $end
$var wire 1 T \escrevemem~output_o\ $end
$var wire 1 U \jump~output_o\ $end
$var wire 1 V \aluSRC~output_o\ $end
$var wire 1 W \branch~output_o\ $end
$var wire 1 X \entrada[0]~input_o\ $end
$var wire 1 Y \entrada[2]~input_o\ $end
$var wire 1 Z \entrada[1]~input_o\ $end
$var wire 1 [ \entrada[3]~input_o\ $end
$var wire 1 \ \Mux0~0_combout\ $end
$var wire 1 ] \Clock~input_o\ $end
$var wire 1 ^ \regdest$latch~combout\ $end
$var wire 1 _ \Mux4~0_combout\ $end
$var wire 1 ` \origalu[0]$latch~combout\ $end
$var wire 1 a \Mux0~1_combout\ $end
$var wire 1 b \origalu[1]$latch~combout\ $end
$var wire 1 c \Mux2~0_combout\ $end
$var wire 1 d \origalu[2]$latch~combout\ $end
$var wire 1 e \Mux1~0_combout\ $end
$var wire 1 f \origalu[3]$latch~combout\ $end
$var wire 1 g \Mux0~2_combout\ $end
$var wire 1 h \escrevereg$latch~combout\ $end
$var wire 1 i \Mux6~0_combout\ $end
$var wire 1 j \lemem$latch~combout\ $end
$var wire 1 k \Mux7~0_combout\ $end
$var wire 1 l \escrevemem$latch~combout\ $end
$var wire 1 m \Mux10~0_combout\ $end
$var wire 1 n \jump$latch~combout\ $end
$var wire 1 o \Mux9~0_combout\ $end
$var wire 1 p \aluSRC$latch~combout\ $end
$var wire 1 q \Mux8~0_combout\ $end
$var wire 1 r \branch$latch~combout\ $end
$var wire 1 s \ALT_INV_Clock~input_o\ $end
$var wire 1 t \ALT_INV_entrada[3]~input_o\ $end
$var wire 1 u \ALT_INV_entrada[1]~input_o\ $end
$var wire 1 v \ALT_INV_entrada[2]~input_o\ $end
$var wire 1 w \ALT_INV_entrada[0]~input_o\ $end
$var wire 1 x \ALT_INV_branch$latch~combout\ $end
$var wire 1 y \ALT_INV_aluSRC$latch~combout\ $end
$var wire 1 z \ALT_INV_jump$latch~combout\ $end
$var wire 1 { \ALT_INV_escrevemem$latch~combout\ $end
$var wire 1 | \ALT_INV_lemem$latch~combout\ $end
$var wire 1 } \ALT_INV_escrevereg$latch~combout\ $end
$var wire 1 ~ \ALT_INV_origalu[3]$latch~combout\ $end
$var wire 1 !! \ALT_INV_origalu[2]$latch~combout\ $end
$var wire 1 "! \ALT_INV_origalu[1]$latch~combout\ $end
$var wire 1 #! \ALT_INV_origalu[0]$latch~combout\ $end
$var wire 1 $! \ALT_INV_regdest$latch~combout\ $end
$var wire 1 %! \ALT_INV_Mux8~0_combout\ $end
$var wire 1 &! \ALT_INV_Mux9~0_combout\ $end
$var wire 1 '! \ALT_INV_Mux10~0_combout\ $end
$var wire 1 (! \ALT_INV_Mux7~0_combout\ $end
$var wire 1 )! \ALT_INV_Mux6~0_combout\ $end
$var wire 1 *! \ALT_INV_Mux0~2_combout\ $end
$var wire 1 +! \ALT_INV_Mux1~0_combout\ $end
$var wire 1 ,! \ALT_INV_Mux2~0_combout\ $end
$var wire 1 -! \ALT_INV_Mux0~1_combout\ $end
$var wire 1 .! \ALT_INV_Mux4~0_combout\ $end
$var wire 1 /! \ALT_INV_Mux0~0_combout\ $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
1#
0(
0)
1*
0+
0,
01
02
13
x4
15
16
17
18
19
1:
1;
0@
0E
0F
0G
0H
1I
0J
1K
0L
1M
0N
1O
0P
0Q
0R
0S
0T
1U
0V
1W
1X
1Y
0Z
0[
0\
1]
0^
1_
1`
1a
0b
1c
1d
0e
0f
0g
0h
0i
0j
0k
0l
1m
1n
0o
0p
1q
1r
0s
1t
1u
0v
0w
0x
1y
0z
1{
1|
1}
1~
0!!
1"!
0#!
1$!
0%!
1&!
0'!
1(!
1)!
1*!
1+!
0,!
0-!
0.!
1/!
0$
1%
0&
1'
0-
1.
0/
10
0<
1=
0>
1?
0A
1B
0C
1D
$end
#1000000
